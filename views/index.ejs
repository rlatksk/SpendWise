<% const transactionsJSON = JSON.stringify(transactions); %>

<div class="home-header">
    <div class="home-header-left">
        <h3>Welcome Back, </h3>
        <h1><%=user.username%>!</h1>
    </div>
    <div class="home-header-right">
        <!-- Used to have another div here so that's why this one has a child -->
        <div class="home-header-statistics">
            <% let totalIncome = 0; %>
            <% let totalExpense = 0; %>
            <% transactions.forEach(transaction => { %>
                <%
                const transactionDate = new Date(transaction.date);
                const today = new Date();
                if (
                    transactionDate.getDate() === today.getDate() &&
                    transactionDate.getMonth() === today.getMonth() &&
                    transactionDate.getFullYear() === today.getFullYear()
                ) { %>
                    <% if (transaction.type === 'income') { %>
                        <% totalIncome += transaction.amount; %>
                    <% } else { %>
                        <% totalExpense += transaction.amount; %>
                    <% } %>
                <% } %>
            <% }); %>
            <div class="home-header-income">
                <p>Today's Income</p>
                <h3>$<%= totalIncome.toFixed(2) %></h3>
            </div>
            <div class="home-header-expense">
                <p>Today's Expense</p>
                <h3>$<%= totalExpense.toFixed(2) %></h3>
            </div>
        </div>
    </div>
</div>

<form action="/transactions" method="GET" enctype="application/x-www-form-urlencoded">
    <div class="transaction-btn-container">
        <button class="add-transaction-btn">ADD TRANSACTION</button>
    </div>
</form>

<div class="charts">
    <div class="doughnut-chart-container">
        <div class="type-doughnut-chart">
            <h2>Types</h2>
            <canvas id="doughnutChartTransactionTypes" data-transactions='<%- transactionsJSON %>'></canvas>
        </div>
        <div class="category-doughnut-chart">
            <h2>Categories</h2>
            <canvas id="doughnutChartCategories" data-transactions='<%- transactionsJSON %>'></canvas>
        </div>
    </div>

    <div class="line-chart">
        <h2>Income & Expense Amount</h2>
        <canvas id="lineChartIncomeExpense" data-transactions='<%- transactionsJSON %>'></canvas>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const transactionsData = JSON.parse(document.getElementById('doughnutChartTransactionTypes').dataset.transactions);

        // Generate labels and data arrays for the past 30 days
        const { labels, incomeData, expenseData } = generateChartData(transactionsData);

        // Create Chart.js instance for transaction types
        var ctxTransactionTypes = document.getElementById('doughnutChartTransactionTypes').getContext('2d');
        var doughnutChartTransactionTypes = new Chart(ctxTransactionTypes, {
            type: 'doughnut',
            data: {
                labels: ['Income', 'Expense'],
                datasets: [{
                    label: 'Transaction Types',
                    data: generateTypeData(transactionsData),
                    backgroundColor: ['rgba(75, 192, 192, 0.6)', 'rgba(255, 99, 132, 0.6)']
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: false
                    },
                }
            }
        });

        // Create Chart.js instance for categories
        var ctxCategories = document.getElementById('doughnutChartCategories').getContext('2d');
        var doughnutChartCategories = new Chart(ctxCategories, {
            type: 'doughnut',
            data: {
                labels: Object.keys(generateCategoryData(transactionsData)),
                datasets: [{
                    label: 'Categories',
                    data: Object.values(generateCategoryData(transactionsData)),
                    backgroundColor: generateRandomColors(Object.keys(generateCategoryData(transactionsData)).length)
                }]
            },
            options: {
                plugins: {
                    legend: {
                        display: false
                    },
                }
            }
        });

        // Create Chart.js instance for line chart (Income & Expense)
        var ctxLineChart = document.getElementById('lineChartIncomeExpense').getContext('2d');
        var lineChartIncomeExpense = new Chart(ctxLineChart, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Income',
                    data: incomeData,
                    fill: false,
                    borderColor: 'rgba(75, 192, 192, 0.6)',
                    tension: 0.1
                },
                {
                    label: 'Expense',
                    data: expenseData,
                    fill: false,
                    borderColor: 'rgba(255, 99, 132, 0.6)',
                    tension: 0.1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Function to generate data for doughnut chart (Transaction Types)
        function generateTypeData(transactions) {
            let incomeCount = 0;
            let expenseCount = 0;

            transactions.forEach(transaction => {
                if (transaction.type === 'income') {
                    incomeCount++;
                } else {
                    expenseCount++;
                }
            });

            return [incomeCount, expenseCount];
        }

        // Function to generate data for doughnut chart (Categories)
        function generateCategoryData(transactions) {
            const categoryCounts = {};
            const currentDate = new Date();

            transactions.forEach(transaction => {
                const transactionDate = new Date(transaction.date);
                    const category = transaction.category.toLowerCase();
                    categoryCounts[category] = (categoryCounts[category] || 0) + 1;
            });

            return categoryCounts;
        }

        // Function to generate random background colors for doughnut chart
        function generateRandomColors(count) {
            const colors = [];
            for (let i = 0; i < count; i++) {
                colors.push(`rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.6)`);
            }
            return colors;
        }

        // Function to generate labels and data arrays for the past 30 days for line chart
        function generateChartData(transactions) {
            const labels = [];
            const incomeData = [];
            const expenseData = [];
            const currentDate = new Date();

            for (let i = 29; i >= 0; i--) {
                const date = new Date(currentDate);
                date.setDate(date.getDate() - i);
                labels.push(formatDate(date));

                const transactionsOnDate = transactions.filter(transaction => isSameDay(new Date(transaction.date), date));
                if (transactionsOnDate.length > 0) {
                    incomeData.push(transactionsOnDate.filter(transaction => transaction.type === 'income').reduce((total, transaction) => total + transaction.amount, 0));
                    expenseData.push(transactionsOnDate.filter(transaction => transaction.type === 'expense').reduce((total, transaction) => total + transaction.amount, 0));
                } else {
                    incomeData.push(0);
                    expenseData.push(0);
                }
            }
            return { labels, incomeData, expenseData };
        }

        // Function to check if two dates are the same day
        function isSameDay(date1, date2) {
            return date1.getFullYear() === date2.getFullYear() &&
                date1.getMonth() === date2.getMonth() &&
                date1.getDate() === date2.getDate();
        }

        // Function to format date as "DD-MM"
        function formatDate(date) {
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0');
            return `${day}-${month}`;
        }
    });
</script>